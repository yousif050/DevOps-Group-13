trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  node_version: '22.x'
  app_port: 3000

stages:

# INSTALL

- stage: Install
  jobs:
    - job: InstallDependencies
      steps:
        - task: UseNode@1
          inputs:
            version: '$(node_version)'

        - checkout: self

        - script: |
            npm ci
            cd frontend/auth-frontend && npm ci && npm install vite --save-dev && npm install jest --save-dev && cd ../..
            cd frontend/community-frontend && npm ci && npm install vite --save-dev && npm install jest --save-dev && cd ../..
            cd backend/auth-service && npm ci && cd ../..
            cd backend/community-service && npm ci && cd ../..
          displayName: 'Install dependencies'


# BUILD & TEST

- stage: BuildAndTest
  dependsOn: Install
  jobs:
    - job: BuildTest
      steps:
        - task: UseNode@1
          inputs:
            version: '$(node_version)'

        - checkout: self

        # Install Java 17 using the Java tool installer
        - task: JavaToolInstaller@0
          inputs:
            versionSpec: '17'
            jdkArchitectureOption: 'x64'
            jdkSourceOption: 'PreInstalled'
          displayName: 'Setup Java 17'

        # Verify Java version
        - script: |
            java -version
            echo "JAVA_HOME=$JAVA_HOME"
          displayName: 'Verify Java 17 Installation'

        # Set environment variables that will be used by all subsequent steps
        - bash: |
            echo "##vso[task.setvariable variable=JAVA_HOME_11_X64]$JAVA_HOME"
            echo "##vso[task.setvariable variable=JAVA_HOME]$JAVA_HOME"
            echo "##vso[task.setvariable variable=PATH]$JAVA_HOME/bin:$PATH"
          displayName: 'Set Java Environment Variables'

        # --- SonarQube Analysis: Prepare Phase ---
        - task: SonarCloudPrepare@1
          inputs:
            SonarCloud: 'DevOps-Group-13'
            organization: 'yousif050'
            scannerMode: 'CLI'
            configMode: 'manual'
            cliProjectKey: 'yousif050_DevOps-Group-13'
            cliProjectName: 'DevOps-Group-13'
            extraProperties: |
              # Force SonarQube to use our Java installation
              sonar.scanner.force-java-version=true
              sonar.java.jdkHome=$(JAVA_HOME)
          displayName: 'Prepare SonarQube Analysis'

        - script: |
            # Frontend: auth-frontend
            cd frontend/auth-frontend
            npm ci
            npm run build
            npm run test -- --coverage
            cd ../community-frontend

            # Frontend: community-frontend
            npm ci
            npm run build
            npm run test -- --coverage
            cd ../..

            # Backend: auth-service
            cd backend/auth-service
            npm ci
            npm test -- --coverage
            cd ../community-service

            # Backend: community-service
            npm ci
            npm test -- --coverage
            cd ../..
          displayName: 'Build and Test All'

        # --- Use newer SonarQube Scanner task or run it manually ---
        - bash: |
            # Create a script to set Java 17 for the SonarQube scanner
            cat > sonar-wrapper.sh << 'EOL'
            #!/bin/bash
            export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
            echo "JAVA_HOME set to: $JAVA_HOME"
            java -version
            
            # Use the SonarQube scanner with our Java version
            $(dirname "$0")/sonar-scanner "$@"
            EOL
            
            # Make it executable
            chmod +x sonar-wrapper.sh
            
            # Replace the original scanner with our wrapper
            SONAR_SCANNER_PATH="/home/vsts/work/_tasks/SonarQubeAnalyze_6d01813a-9589-4b15-8491-8164aeb38055/5.20.1/sonar-scanner/bin/sonar-scanner"
            SONAR_DIR=$(dirname "$SONAR_SCANNER_PATH")
            cp sonar-wrapper.sh "$SONAR_DIR/"
            mv "$SONAR_SCANNER_PATH" "$SONAR_SCANNER_PATH.orig"
            cp sonar-wrapper.sh "$SONAR_SCANNER_PATH"
          displayName: 'Setup SonarQube Scanner Wrapper'
          
        # Now run the SonarQube Analysis
        - task: SonarQubeAnalyze@5
          displayName: 'Run SonarQube Analysis'
          env:
            JAVA_HOME: $(JAVA_HOME)
            PATH: $(JAVA_HOME)/bin:$(PATH)

        - task: SonarQubePublish@5
          inputs:
            pollingTimeoutSec: '300'
          displayName: 'Publish SonarQube Results'

        - task: PublishCodeCoverageResults@1
          displayName: 'Publish Code Coverage (Auth Frontend)'
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: 'frontend/auth-frontend/coverage/cobertura-coverage.xml'
            reportDirectory: 'frontend/auth-frontend/coverage'

        - task: PublishCodeCoverageResults@1
          displayName: 'Publish Code Coverage (Community Frontend)'
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: 'frontend/community-frontend/coverage/cobertura-coverage.xml'
            reportDirectory: 'frontend/community-frontend/coverage'

        - task: PublishCodeCoverageResults@1
          displayName: 'Publish Code Coverage (Auth Service)'
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: 'backend/auth-service/coverage/cobertura-coverage.xml'
            reportDirectory: 'backend/auth-service/coverage'

        - task: PublishCodeCoverageResults@1
          displayName: 'Publish Code Coverage (Community Service)'
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: 'backend/community-service/coverage/cobertura-coverage.xml'
            reportDirectory: 'backend/community-service/coverage'


# DELIVER: Package Artifacts
- stage: Deliver
  dependsOn: BuildAndTest
  jobs:
    - job: CreateArtifact
      steps:
        - task: CopyFiles@2
          inputs:
            contents: |
              frontend/auth-frontend/dist/**
              frontend/community-frontend/dist/**
              backend/**
            targetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'

# DEPLOY STAGES

- stage: Deploy_Dev
  displayName: 'Deploy to Dev Environment'
  dependsOn: Deliver
  jobs:
    - job: DeployDev
      steps:
        - download: current
          artifact: drop
        - script: |
            echo "[DEV] Starting Mock Deployment on port $(app_port)"
            echo "App would be served on http://localhost:$(app_port)"
            # node backend/auth-service/index.js # ← simulate app launch here if needed
          displayName: 'Mock Deploy to Dev'

- stage: Deploy_QAT
  displayName: 'Deploy to QAT Environment'
  dependsOn: Deploy_Dev
  jobs:
    - job: DeployQAT
      steps:
        - download: current
          artifact: drop
        - script: echo "[QAT] Mock deployment complete."
          displayName: 'Mock Deploy to QAT'

- stage: Deploy_Staging
  displayName: 'Deploy to Staging Environment'
  dependsOn: Deploy_QAT
  jobs:
    - job: DeployStaging
      steps:
        - download: current
          artifact: drop
        - script: echo "[Staging] Mock deployment complete."
          displayName: 'Mock Deploy to Staging'

- stage: Deploy_Prod
  displayName: 'Deploy to Production Environment'
  dependsOn: Deploy_Staging
  jobs:
    - job: DeployProd
      steps:
        - download: current
          artifact: drop
        - script: echo "[Production] Deployed successfully."
          displayName: 'Mock Deploy to Production'