# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  node_version: '22.x'

stages:
  - stage: Install
    jobs:
      - job: InstallDependencies
        steps:
          - task: UseNode@1
            inputs:
              version: '$(node_version)'
          - checkout: self
          - script: |
              npm ci
              cd frontend/auth-frontend && npm ci && cd ../..
              cd frontend/community-frontend && npm ci && cd ../..
              cd backend/auth-service && npm ci && cd ../..
              cd backend/community-service && npm ci && cd ../..
            displayName: 'Install dependencies with npm ci'

  - stage: Build
    jobs:
      - job: BuildApp
        steps:
          - task: UseNode@1
            inputs:
              version: '$(node_version)'
          - script: |
              cd frontend/auth-frontend && npx vite --version && cd ../..
              cd frontend/community-frontend && npx vite --version && cd ../..
            displayName: 'Verify Vite Installation'

          - script: |
              cd frontend/auth-frontend && npm run build
              cd ../community-frontend && npm run build
            displayName: 'Build React'

  # - stage: Analyze
  #   jobs:
  #     - job: SonarQubeAnalysis
  #       steps:
  #         - task: SonarQubePrepare@5
  #           inputs:
  #             SonarQube: 'SonarQubeServiceConnection'
  #             scannerMode: 'CLI'
  #             configMode: 'manual'
  #             cliProjectKey: 'your-project-key'
  #             cliProjectName: 'ReactExpressApp'
  #             cliSources: '.'

  #         - script: |
  #             npm run lint
  #           displayName: 'Lint and Analyze'

  #         - task: SonarQubeAnalyze@5

  #         - task: SonarQubePublish@5
  #           inputs:
  #             pollingTimeoutSec: '300'

  # - stage: Test
  #   jobs:
  #     - job: RunTests
  #       steps:
  #         - script: |
  #             cd server && npm test -- --coverage
  #             cd ../client && npm test -- --coverage
  #           displayName: 'Run Unit Tests and Coverage'

  #         - task: PublishCodeCoverageResults@1
  #           inputs:
  #             codeCoverageTool: 'Cobertura'
  #             summaryFileLocation: '**/coverage/cobertura-coverage.xml'
  #             reportDirectory: '**/coverage'

  - stage: Package
    jobs:
      - job: CreateArtifact
        steps:
          - task: CopyFiles@2
            inputs:
              contents: |
                client/build/**
                server/**
              targetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
